#!/usr/bin/env python3

import psutil
import subprocess
import time

from rich import print
from rich.console import Console
from rich.prompt import Prompt
from simple_term_menu import TerminalMenu
import pathlib
from tkinter import filedialog as fd
from datetime import datetime

##########################################################
# Xcode
##########################################################
def fix_xcode():
    console.print("Closing Xcode", style="blue")
    for proc in psutil.process_iter(['pid', 'name']):
        if 'Xcode' in proc.info['name']:
            proc.kill()

    console.print("Deleting local DerivedData", style="blue")        
    subprocess.run(['rm', '-rf', 'DerivedData'], check=True)

    console.print("Deleting shared DerivedData", style="blue")        
    subprocess.run(['rm', '-rf', '~/Library/Developer/Xcode/DerivedData'], check=True)

    console.print("Resolving package dependencies", style="blue")        
    subprocess.run(['xcodebuild', '-resolvePackageDependencies'], check=True)

    console.print("Opening Xcode", style="blue")        
    subprocess.run(['open', '-a', '/Applications/Xcode.app'], check=True)

def delete_derived_data():
    console.print("Deleting local DerivedData", style="blue")        
    subprocess.run(['rm', '-rf', 'DerivedData'], check=True)
    console.print("Deleting shared DerivedData", style="blue")        
    subprocess.run(['rm', '-rf', '~/Library/Developer/Xcode/DerivedData'], check=True)

def reset_package_caches():
    start = time.time()
    console.print("\nResolving package dependencies", style="blue")        
    subprocess.run(['xcodebuild', '-resolvePackageDependencies'], check=True)
    end = time.time()
    console.print(f"\nResolved package dependencies in {end - start} seconds", style="blue")

def run_xcode_build():
    scheme_name = Prompt.ask("Enter the scheme name to build", default="PPlusTV")
    console.print(f"Running Xcode build for scheme: {scheme_name}", style="blue")        
    subprocess.run(['xcodebuild', '-workspace', 'CBS.xcworkspace', '-scheme', scheme_name, 'build'], check=True)

def list_devices():
    console.print("\n")      
    console.print("Listing all devices", style="blue")        
    subprocess.run(['xcrun', 'xctrace', 'list', 'devices'], check=True)
    console.print("\n")

def list_all_device_info():
    console.print("\n")      
    console.print("Listing all available runtimes, device types, devices, and device pairs", style="blue")        
    subprocess.run(['xcrun', 'simctl', 'list'], check=True)
    console.print("\n")        

def list_all_booted_devices():
    console.print("\n")
    console.print("Listing all booted devices", style="blue")
    subprocess.run(['xcrun', 'simctl', 'list', 'devices','booted'], check=True)
    console.print("\n")

def list_schemes():
    console.print("\n")      
    console.print("Listing all schemes", style="blue")        
    subprocess.run(['xcodebuild', '-list'], check=True)
    console.print("\n")

def copy_bookmarks_to_desktop():
    console.print("\n")
    console.print("Copying your Xcode bookmarks to the desktop", style="blue")
    output = subprocess.check_output(['whoami'], encoding='utf-8').strip()
    subprocess.run(['cp', f"CBS.xcworkspace/xcuserdata/{output}.xcuserdatad/Bookmarks/bookmarks.plist", f"/Users/{output}/Desktop/bookmarks_{datetime.now().strftime('%Y_%m_%d-%I_%M_%S_%p')}.plist"], check=True)
    console.print("\n")

def list_branches_commits_dates():
    console.print("\n")
    console.print("Listing all branches, commits, and last commit date", style="blue")
    command = "git for-each-ref --sort='-authordate:iso8601' --format='%(authordate:short) %(objectname:short) %(refname:short)' refs/heads"
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, error = process.communicate()
    if error:
        print("Error:", error.decode())
    else:
        print(output.decode())
    console.print("\n")

# def import_bookmarks_to_xcode():
#     console.print("\n")
#     console.print("Select your exported bookmarks plist file", style="blue")
#     filetypes = (
#         ('plist files', '*.plist')
#     )
#     theFile = fd.askopenfilename(title="Open a plist File", filetypes=(("plist", "*.plist"), ("all files", "*.*")))
#     filePath = pathlib.Path(theFile)
#     output = subprocess.check_output(['whoami'], encoding='utf-8').strip()
#     subprocess.run(['cp', f"{filePath}", f"CBS.xcworkspace/xcuserdata/{output}.xcuserdatad/Bookmarks/bookmarks.plist"], check=True)
#     console.print("Imported your bookmarks to Xcode", style="blue")
#     console.print("\n")
#     console.print("Make sure Xcode loads bookmarks in the ide", style="blue")
#     subprocess.run(['open', '-a', '/Applications/Xcode.app'], check=True)
#     console.print("\n")

def copy_breakpoints_to_desktop():
    console.print("\n")
    console.print("Copying your Xcode bookmarks to the desktop", style="blue")
    output = subprocess.check_output(['whoami'], encoding='utf-8').strip()
    subprocess.run(['cp', f"CBS.xcworkspace/xcuserdata/{output}.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist", f"/Users/{output}/Desktop/breakpoints_{datetime.now().strftime('%Y_%m_%d-%I_%M_%S_%p')}.xcbkptlist"], check=True)
    console.print("\n")

def create_test_build():
    console.print("\n")
    try:
        subprocess.run(['git', 'rev-parse', '--is-inside-work-tree'], check=True)
    except subprocess.CalledProcessError:
        console.print("You are not inside a git repository. Exiting...", style="bold red")
        return
    current_branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], encoding='utf-8').strip()
    console.print("Do you want to push to 'pplus', 'pplustv', 'pplusINTL' or 'pplustvINTL'? Enter 'pplus', 'pplustv', 'pplusINTL' or 'pplustvINTL': ", style="blue")
    branch_target = input().strip()
    if branch_target not in ['pplus', 'pplustv', 'pplusINTL', 'pplustvINTL']:
        console.print("Invalid input. Please enter 'pplus' or 'pplustv'.", style="bold red")
    else:
        branch_target = f"build/firenation/{branch_target}"
        console.print(f"Pushing to {branch_target}...", style="blue")
        try:
            subprocess.run(['git', 'push', '--force', 'origin', f"{current_branch}:{branch_target}"], check=True)
            console.print(f"Successfully pushed {current_branch} to {branch_target}.", style="bold green")
        except subprocess.CalledProcessError as e:
            console.print(f"Failed to push {current_branch} to {branch_target}. Error: {str(e)}", style="bold red")

##########################################################
# Proxy
##########################################################

def list_proxy_settings():
    console.print("\n")      
    console.print("Listing proxy settings", style="blue")        
    subprocess.run(['networksetup', '-getwebproxy', 'wi-fi'], check=True)
    subprocess.run(['networksetup', '-getsecurewebproxy', 'wi-fi'], check=True)
    console.print("\n")      
    menu()

##########################################################
# Menu
##########################################################
def menu():
    menuTerms = [t[0] for t in menuOptions]
    menuFunctions = [t[1] for t in menuOptions]

    terminal_menu = TerminalMenu(menuTerms)
    menu_entry_index = terminal_menu.show()
    
    if menu_entry_index is not None and menu_entry_index >= 0 and menu_entry_index < len(menuFunctions):
        menuFunctions[menu_entry_index]()
    else:
        exit

##########################################################
# Properties
##########################################################
menuOptions = [
    ("Fix my Xcode",                            fix_xcode), 
    ("Delete DerivedData",                      delete_derived_data),
    ("List proxy settings",                     list_proxy_settings),
    ("Reset package caches",                    reset_package_caches),
    ("List devices",                            list_devices),
    ("List all device info",                    list_all_device_info),
    ("List all booted devices",                 list_all_booted_devices),
    ("List packages/targets/schemes/build configs", list_schemes),
    ("Copy bookmarks to desktop",               copy_bookmarks_to_desktop),
    # ("Import bookmarks to Xcode", import_bookmarks_to_xcode),
    ("Copy breakpoints to desktop",             copy_breakpoints_to_desktop),
    ("List branches, commits, and last commit date", list_branches_commits_dates),
    ("Run Xcode build",                         run_xcode_build),
    ("Create test build from current branch",   create_test_build),
    ("Quit",                                    exit)
]

##########################################################
# Main
##########################################################
if __name__ == "__main__":
    console = Console()
    console.print("Please pick an option:\n", style="bold blue")
    menu()